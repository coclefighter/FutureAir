<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.air.future.dao.AdminBoardMapper">

<!-- 게시글관리 -->
	<!-- 게시물 리스트 -->
	<select id="getPostList" parameterType="HashMap" resultType="HashMap">
		select p.post_index, p.title, p.writer, p.board_name, p.contents, to_char(p.post_date, 'YYYY-MM-DD') as post_date, p.hits, p.reply_index, b.reply_type
		from post_fa p, board_fa b
		where p.board_name = b.board_name
		<if test="!post_date_start.equals('')">and to_char(p.post_date, 'YYYY-MM-DD') >= #{post_date_start}</if>
		<if test="!post_date_end.equals('')">and to_char(p.post_date, 'YYYY-MM-DD') &lt;= #{post_date_end}</if>	
		<if test="!board_name.equals('전체')">and p.board_name = #{board_name}</if>	
		<if test="!reply_type.equals('전체')">and b.reply_type = '1'</if>
 		<if test="reply_type.equals('답변완료')">and p.reply_index is not null</if>
		<if test="reply_type.equals('답변전')">and p.reply_index is null</if>
		<if test="!search_text.equals('')">and p.title like '%' || #{search_text} || '%'</if>
		order by p.post_date desc
	</select>
	
	<!-- 게시물 리스트 갯수 -->
	<select id="getTotal" parameterType="HashMap" resultType="int">
		select count(*)
		from post_fa p, board_fa b
		where p.board_name = b.board_name
		<if test="!post_date_start.equals('')">and to_char(p.post_date, 'YYYY-MM-DD') >= #{post_date_start}</if>
		<if test="!post_date_end.equals('')">and to_char(p.post_date, 'YYYY-MM-DD') &lt;= #{post_date_end}</if>	
		<if test="!board_name.equals('전체')">and p.board_name = #{board_name}</if>	
		<if test="!reply_type.equals('전체')">and b.reply_type = '1'</if>
 		<if test="reply_type.equals('답변완료')">and p.reply_index is not null</if>
		<if test="reply_type.equals('답변전')">and p.reply_index is null</if>
		<if test="!search_text.equals('')">and p.title like '%' || #{search_text} || '%'</if>
	</select>
	
	<select id="getTopicList" resultType="String">
		select board_name from board_fa
	</select>
	 
	 <!-- 게시물 삭제 -->
	<delete id="deletePost" parameterType="String">
		delete from post_fa 
		where post_index = to_number(#{board_index})
	</delete>
	
	<!-- 게시물 정보 -->
	<select id="getPost" parameterType="String" resultType="post">
		select * from post_fa 
		where post_index = #{post_index}
	</select>
	
	
<!-- 게시판관리 -->
	<!-- 게시판 리스트 -->
 	<select id="getBoardList" resultType="HashMap">
		select a.board_name, a.board_id, a.board_type, a.reply_type, a.write_right, a.read_right, nvl(b.count_allday, 0) count_allday, nvl(c.count_today, 0) count_today from 
		(select * from board_fa) a LEFT OUTER JOIN 
		(select board_name,  count(*) count_allday from post_fa group by board_name) b on (a.board_name = b.board_name)  LEFT OUTER JOIN 
		(select board_name,  count(*) count_today from post_fa 
		where to_char(post_date, 'YYYY-MM-DD') = to_char(sysdate, 'YYYY-MM-DD')
		group by board_name) c on (b.board_name = c.board_name)
		order by a.board_id desc
	</select>
	
	<!-- 게시판 리스트 갯수 -->
	<select id="getSettingTotal" resultType="int">
		select count(*) from board_fa
	</select>
	
	<!-- 게시판 삭제 -->
	<delete id="deleteBoard" parameterType="String">
		delete from board_fa 
		where board_name = #{board_name}
	</delete>
	
	<!-- 관리자 게시판 추가하기 -->
	<insert id="insertBoard" parameterType="board">
 		insert into board_fa values(#{board_name}, board_index_seq.nextval,  #{board_type}, #{reply_type}, #{write_right}, #{read_right})
	</insert>
	
	<!-- 게시판 정보 -->
	<select id="getBoard" parameterType="String" resultType="board">
		select * from board_fa where board_name = #{board_name}
	</select>

<!-- 게시판 별 처리 -->

	<!-- 게시판 게시글 리스트 갯수 -->
	<select id="getPostTotalByBoard" parameterType="String" resultType="int">
		select count(*) from post_fa
		where board_name = #{board_name}
	</select>
	
	<!-- 게시판 게시글 리스트 -->
	<select id="getPostListByBoard" parameterType="String" resultType="post">
		select post_index, title, writer, to_char(post_date, 'yyyy-mm-dd') post_date, hits from post_fa
		where board_name = #{board_name}
		order by post_date desc
	</select>
	
	<!-- 게시판 공지글 리스트 -->
	<select id="getNoticeList" parameterType="String" resultType="post">
		select post_index, title, writer, to_char(post_date, 'yyyy-mm-dd') post_date, hits from post_fa
		where board_name = #{board_name}
		and notice_index = 1
		order by post_date desc
	</select>
	
	<!-- 게시판 설정 수정하기 버튼 -->
	<update id="updateBoard" parameterType="board">
		update board_fa set board_name = #{board_name}, board_type = #{board_type}, reply_type = #{reply_type},
		write_right = #{write_right}, read_right = #{read_right}
		where board_id = #{board_id}
	</update>
	
	<!-- 게시글 수정하기 버튼 -->
	<update id="funPostUpdate" parameterType="post">
		update post_fa set title = #{title}, writer = #{writer}, board_name = #{board_name}, contents =#{contents},
			post_type = #{post_type,jdbcType=VARCHAR} 
		where post_index = #{post_index}
	</update>
	
	<!-- 작성자 아이디 가져오기 -->
	<select id="getAdmin" resultType="admin">
		select * from admin_fa
	</select>
	
	<!-- 게시판에서 넣기  -->
	<insert id="insertPost" parameterType="post">
		insert into post_fa(post_index, title, writer, board_name, contents, post_type) values
		(post_index_seq.nextval, #{title}, #{writer}, #{board_name}, #{contents}, #{post_type,jdbcType=VARCHAR})
	</insert>
	
	<!-- 고정글로 추가하기 -->
	<update id="insertNotice" parameterType="post">
		update post_fa set notice_index = #{notice_index} where post_index = #{post_index}
	</update>
	
</mapper>