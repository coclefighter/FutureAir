<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.air.future.dao.AdminCustomerMapper">
	<!-- 페이징 처리 : 회원정보 검색을 위한 총 개수 확인하기 -->
	<select id="customerGetTotal" parameterType="customer" resultType="int">
		select count(*)
		from customer_fa
		<where>
			1=1
			<if test="!customer_name.equals('')">	and customer_name like '%' || #{customer_name}  || '%'</if>
			<if test="!customer_id.equals('')">		and customer_id like '%' || #{customer_id} || '%'</if>
			<if test="!customer_email.equals('')">	and customer_email like '%' || #{customer_email} || '%'</if>
			<if test="!customer_phone.equals('')">	and customer_phone like '%' || #{customer_phone} || '%'</if>
			<if test="!customer_gender.equals('전체')">	and customer_gender like '%' || #{customer_gender} || '%'</if>
			<if test="!customer_grade.equals('전체')">	and customer_grade like '%' || #{customer_grade} || '%'</if>
		</where>
	</select>
	
	<!-- 회원정보 전체 불러오기 -->
	<select id="customerListAll" resultType="customer">
		select customer_id
				, customer_name
				, customer_gender
				, customer_country
				, customer_email
				, customer_address
				, customer_phone
				, customer_birth
				, customer_grade
				, to_char(customer_joindate, 'YYYY-MM-DD') as customer_joindate
		from customer_fa
	</select>
	
	<!-- 검색한 회원정보 불러오기 -->
	<select id="customerFind" parameterType="customer" resultType="customer">
		select customer_id
				, customer_name
				, customer_gender
				, customer_country
				, customer_email
				, customer_address
				, customer_phone
				, customer_birth
				, customer_grade
				, to_char(customer_joindate, 'YYYY-MM-DD') as customer_joindate
		from customer_fa
		<where>
			1=1
			<if test="!customer_name.equals('')">	and customer_name like '%' || #{customer_name}  || '%'</if>
			<if test="!customer_id.equals('')">		and customer_id like '%' || #{customer_id} || '%'</if>
			<if test="!customer_email.equals('')">	and customer_email like '%' || #{customer_email} || '%'</if>
			<if test="!customer_phone.equals('')">	and customer_phone like '%' || #{customer_phone} || '%'</if>
			<if test="!customer_gender.equals('전체')">	and customer_gender like '%' || #{customer_gender} || '%'</if>
			<if test="!customer_grade.equals('전체')">	and customer_grade like '%' || #{customer_grade} || '%'</if>
		</where> 
	</select>
	
	<!-- 회원등급 및 회원등급에 따른 전체 회원수 불러오기 -->
	<select id="customerGradeAll" resultType="grade">
		select a.*, NVL(b.the_count, 0) as the_count 
		from customer_grade_fa a LEFT OUTER JOIN
    							(select customer_grade, count(*) as the_count 
    								from customer_fa
    								group by customer_grade ) b
		ON a.grade = b.customer_grade
		order by promo_terms
	</select>
	
	<!-- 회원정보(customer_fa) 삭제를 위한 마일리지(mileage_fa) 삭제하기 -->
	<delete id="mileageDelete" parameterType="string">
		delete from mileage_fa 
		where mileage_id = #{customer_id}
	</delete>
	<!-- 회원정보(customer_fa) 삭제를 위한 예약 부분(reservation_fa) 삭제하기 -->
	<delete id="reservationDelete" parameterType="string">
		delete from reservation_fa 
		where customer_id = #{customer_id}
	</delete>
	<!-- 회원정보(customer_fa) 삭제하기 -->
	<delete id="customerDelete" parameterType="string">
		delete from customer_fa 
		where customer_id = #{customer_id}
	</delete>
	
	<!-- 페이징 처리 : 회원등급별 화원관리 검색 기능(customerGrade.jsp) -->
	<select id="gradeGetTotal" parameterType="customer" resultType="int">
		select count(*)
		from customer_fa
		<where>
			1=1
			<if test="!customer_name.equals('')">		and customer_name like '%' || #{customer_name}  || '%'	</if>
			<if test="!customer_id.equals('')">			and customer_id like '%' || #{customer_id} || '%'		</if>
			<if test="!customer_grade.equals('전체')">	and customer_grade like '%' || #{customer_grade} || '%'	</if>
		</where>
	</select>
	
	
	<!-- 회원등급별 화원관리 검색 기능(customerGrade.jsp) -->
	<select id="gradeFind" parameterType="customer" resultType="customer">
		select customer_id
				, customer_name
				, customer_gender
				, customer_country
				, customer_email
				, customer_address
				, customer_phone
				, customer_birth
				, customer_grade
				, to_char(customer_joindate, 'YYYY-MM-DD') as customer_joindate
		from customer_fa
		<where>
			1=1
			<if test="!customer_name.equals('')">		and customer_name like '%' || #{customer_name}  || '%'	</if>
			<if test="!customer_id.equals('')">			and customer_id like '%' || #{customer_id} || '%'		</if>
			<if test="!customer_grade.equals('전체')">	and customer_grade like '%' || #{customer_grade} || '%'	</if>
		</where>
	</select>
	
	<!-- 팝업창 : 회원정보 팝업창 정보에 필요한 회원정보 불러오기(customerInfo.jsp) -->
	<select id="customerInfoFind" parameterType="customer" resultType="customer">
		select customer_id
				, customer_name
				, customer_gender
				, customer_country
				, customer_email
				, customer_address
				, customer_phone
				, customer_birth
				, customer_grade
				, to_char(customer_joindate, 'YYYY-MM-DD') as customer_joindate
		from customer_fa
		<where>
			customer_id = #{customer_id}
		</where>
	</select>
	
	<!-- 팝업창 : 회원정보 팝업창 정보에 필요한 개인 마일리지 정보 불러오기(customerInfo.jsp) -->
	<select id="customerMileageFind" parameterType="string" resultType="string">
		select NVL(sum(mileage_point), '0') as mileage_point
		from mileage_fa
		<where>
			mileage_id = #{mileage_id}
		</where>
	</select>
	
	<!-- 팝업창 : 회원정보 팝업창 정보에 필요한 개인 총결제금액 정보 불러오기(customerInfo.jsp) -->
	<select id="customerFullPay" parameterType="string" resultType="string">
		select sum(payment) as pay 
		from reservation_fa
		<where>
			customer_id = #{customer_id}
		</where>
	</select>
	
	<!-- 팝업창 : 마일리지 팝업창 정보에 필요한 개인 총 마일리지 불러오기 -->
	<select id="mileageAll" parameterType="string" resultType="string">
		select NVL(sum(mileage_point), 0) from mileage_fa 
		<where>
			mileage_id = #{mileage_id}
		</where>
	</select>
	<!-- 팝업창 : 마일리지 팝업창 정보에 필요한 개인 사용한 마일리지 불러오기 -->
	<select id="mileageUsed" parameterType="string" resultType="string">
		select NVL(ABS(sum(mileage_point)), 0) from mileage_fa 
		<where>
			mileage_id = #{mileage_id}
			and mileage_point &lt; 0
		</where>
	</select>
	<!-- 팝업창 : 마일리지 팝업창 정보에 필요한 개인 사용가능 마일리지 불러오기 -->
	<select id="mileageUsable" parameterType="string" resultType="string">
		select NVL(sum(mileage_point), 0) from mileage_fa 
		<where>
			mileage_id = #{mileage_id}
			and mileage_date &lt; sysdate
		</where>
	</select>
	<!-- 팝업창 : 마일리지 팝업창 정보에 필요한 개인 미가용 마일리지 불러오기 -->
	<select id="mileageFUsable" parameterType="string" resultType="string">
		select NVL(sum(mileage_point), 0) from mileage_fa 
		<where>
			mileage_id = #{mileage_id}
			and mileage_date <![CDATA[>=]]> sysdate
		</where>
	</select>
	<!-- 팝업창 : 마일리지 팝업창 정보에 필요한 개인 마일리지 적립내역 불러오기 -->
	<select id="mileageBalance" parameterType="string" resultType="map">
		select to_char(mileage_date, 'YYYY-MM-DD') as mileage_date
				, to_char(mileage_type) as mileage_type
				, to_char(mileage_reservation) as mileage_reservation
				, to_char(mileage_point) as mileage_point
				, to_char(sum(mileage_point) over(order by mileage_index)) as mileage_balance
		from mileage_fa
		<where>
			mileage_id = #{mileage_id}
		</where>
			order by mileage_date
	</select>
	
	<!-- 등급 추가 시 customer_grade_fa 테이블의 중복된 명칭 중복 여부 체킹하기 -->
	<select id="gradeDuplication" parameterType="string" resultType="int">
		select count(*)
		from customer_grade_fa
		<where>
			grade = #{grade}
		</where>
	</select>
	
	<!-- 등급 추가하기 -->
	<insert id="gradeAdd" parameterType="grade">
		insert into customer_grade_fa
		values(customer_grade_seq.nextval
				, #{grade}
				, #{mileage_scope}
				, #{mileage_ratio}
				, #{mileage_exp}
				, #{pay_scope}
				, #{pay_ratio}
				, #{promo_terms}
			)
	</insert>
	

	<!-- 팝업창 : 회원정보 수정하기에서 회원정보 가져오기(customerUpdate.jsp) -->
	<select id="userInfoFind" parameterType="string" resultType="customer">
		select *
		from customer_fa
		<where>
			customer_id = #{customer_id}
		</where>
	</select>
	<!-- 팝업창 : 회원정보 수정하기에서 회원정보 수정하기(customerUpdate.jsp) -->
	<update id="userInfoChange" parameterType="customer">
		update customer_fa
		set
			customer_gender = #{customer_gender}
			, customer_country = #{customer_country}
			, customer_email = #{customer_email}
			, customer_birth = #{customer_birth}
			, customer_address = #{customer_address}
			, customer_phone = #{customer_phone}
			, customer_grade = #{customer_grade}
		<where>
			customer_id = #{customer_id}
		</where>
	</update>
	
	<select id="customerGradeSet" parameterType="string" resultType="grade">
		select *
		from customer_grade_fa
		<where>
			grade = #{grade}
		</where>
	</select>
	<update id="customerGradeChange" parameterType="grade">
		update customer_grade_fa
		set
			grade = #{grade}
			, mileage_scope = #{mileage_scope}
			, mileage_ratio = #{mileage_ratio}
			, mileage_exp = #{mileage_exp}
			, pay_scope = #{pay_scope}
			, pay_ratio = #{pay_ratio}
			, promo_terms = #{promo_terms}
		<where>
			grade = #{grade}
		</where>
	</update>
	
	
	<select id="countGrade" resultType="int">
		select count(*) from customer_grade_fa
	</select>
	
	<update id="gradeDown" parameterType="list">
		update customer_fa
		set customer_grade = NVL((select grade
                       			 from	(select grade 
                        				from customer_grade_fa
                        				where promo_terms &lt; (select min(promo_terms)
                                            					from customer_grade_fa
                                            					where grade IN 
                                            					<foreach collection="list" item="item" open="(" close=")" separator=",">
																		#{item}
																</foreach>
                                            					)
                        				order by promo_terms desc
                        				)
                        		where rownum = 1
                        		), (select grade
									from customer_grade_fa
									where promo_terms = (select min(promo_terms) from customer_grade_fa)
									)
								)
		where
			customer_grade IN
			<foreach collection="list" item="type" open="(" close=")" separator=",">
					#{type}
			</foreach> 
	</update>
	<delete id="gradeDelete" parameterType="list">
		delete from customer_grade_fa
		<where>
			grade IN
			<foreach collection="list" item="type" open="(" close=")" separator=",">
				#{type}
			</foreach>
		</where>
	</delete>
	
	
	<select id="getCommonReservation" parameterType="hashmap" resultType="hashmap">
		select
			reservation_num
			, passenger_name
			, customer_id
			, to_char(reservation_date, 'YYYY-MM-DD') reservation_date
			, to_char(departure_date, 'YYYY-MM-DD') departure_date
			, payment
			, departure_name
			, arrival_name
		from	
			(select 
					full_table.reservation_num
					, full_table.passenger_name
					, full_table.customer_id
					, full_table.reservation_date
					, full_table.departure_date
					, full_table.payment
					, full_table.departure_name
					, full_table.arrival_name
			from (
					select reservation.reservation_num
							, schedule.passenger_name
							, customer.customer_id
							, route.departure_name
							, route.arrival_name
							, route.departure_date
							, reservation.reservation_date
							, reservation.payment
					from reservation_fa reservation
							, schedule_fa schedule
							, route_fa route
							, customer_fa customer
					<where>
						reservation.reservation_num = schedule.reservation_num
						and schedule.route_num	= route.route_num
						and reservation.customer_id = customer.customer_id
						and schedule.passenger_name = customer.customer_name
					</where>
				 ) full_table,
				 (
					select reservation.reservation_num
						   , count(reservation.reservation_num) as count
					from schedule_fa schedule
							, reservation_fa reservation
							, customer_fa customer
					<where>
						schedule.reservation_num = reservation.reservation_num
						and customer.customer_name = schedule.passenger_name
						and customer.customer_id = reservation.customer_id
					</where>
					group by reservation.reservation_num
							, schedule.passenger_name 
				 ) counter
			<where>
					full_table.reservation_num = counter.reservation_num
				and counter.count &lt; 2
			</where>
			
			union all
			
			select 
					full_table_start.reservation_num
					, full_table_start.passenger_name
					, full_table_start.customer_id
					, full_table_start.reservation_date
					, full_table_start.departure_date
					, full_table_start.payment
					, CASE
						WHEN full_table_start.type = '출발' THEN full_table_start.departure_name
					  END AS departure_name
					, CASE
						WHEN full_table_end.type = '도착' THEN full_table_end.arrival_name
					  END AS arrival_name
			from (
					select reservation.reservation_num
							, schedule.passenger_name
							, schedule.type
							, customer.customer_id
							, route.departure_name
							, route.arrival_name
							, route.departure_date
							, reservation.reservation_date
							, reservation.payment
					from reservation_fa reservation
							, schedule_fa schedule
							, route_fa route
							, customer_fa customer
					<where>
							reservation.reservation_num = schedule.reservation_num
						and schedule.route_num	= route.route_num
						and reservation.customer_id = customer.customer_id
						and schedule.passenger_name = customer.customer_name
						and schedule.type IN ('출발')
					</where>
				 ) full_table_start,
				 (
					select reservation.reservation_num
							, schedule.passenger_name
							, schedule.type
							, customer.customer_id
							, route.departure_name
							, route.arrival_name
							, route.departure_date
							, reservation.reservation_date
							, reservation.payment
					from reservation_fa reservation
							, schedule_fa schedule
							, route_fa route
							, customer_fa customer
					<where>
							reservation.reservation_num = schedule.reservation_num
						and schedule.route_num	= route.route_num
						and reservation.customer_id = customer.customer_id
						and schedule.passenger_name = customer.customer_name
						and schedule.type IN ('도착')
					</where>
				 ) full_table_end,
				 (
					select reservation.reservation_num
							, count(reservation.reservation_num) as count
					from schedule_fa schedule
							, reservation_fa reservation
							, customer_fa customer
					<where>
							schedule.reservation_num = reservation.reservation_num
						and customer.customer_name = schedule.passenger_name
					</where>
					group by reservation.reservation_num, schedule.passenger_name 
				 ) counter
			<where>
				full_table_start.reservation_num = counter.reservation_num
				and full_table_end.reservation_num = counter.reservation_num
				and counter.count &gt; 1
			</where>
			)
		<where>
			1=1
			<if test="!customer_id.equals('')">
				and customer_id = #{customer_id}
			</if>
			<if test="!reservation_start.equals('')">
				and reservation_date <![CDATA[>=]]> to_date(#{reservation_start}, 'YYYY-MM-DD')
			</if>
			<if test="!reservation_end.equals('')">
				and reservation_date <![CDATA[<=]]> to_date(#{reservation_end}, 'YYYY-MM-DD') + 1			
			</if>
		</where>
		order by reservation_date, departure_date
	</select>

	
	
		<select id="reservationGetTotal" parameterType="hashmap" resultType="int">
		select
			count(*)
		from	
			(select 
					full_table.reservation_num
					, full_table.passenger_name
					, full_table.customer_id
					, full_table.reservation_date
					, full_table.departure_date
					, full_table.payment
					, full_table.departure_name
					, full_table.arrival_name
			from (
					select reservation.reservation_num
							, schedule.passenger_name
							, customer.customer_id
							, route.departure_name
							, route.arrival_name
							, route.departure_date
							, reservation.reservation_date
							, reservation.payment
					from reservation_fa reservation
							, schedule_fa schedule
							, route_fa route
							, customer_fa customer
					<where>
						reservation.reservation_num = schedule.reservation_num
						and schedule.route_num	= route.route_num
						and reservation.customer_id = customer.customer_id
						and schedule.passenger_name = customer.customer_name
					</where>
				 ) full_table,
				 (
					select reservation.reservation_num
						   , count(reservation.reservation_num) as count
					from schedule_fa schedule
							, reservation_fa reservation
							, customer_fa customer
					<where>
						schedule.reservation_num = reservation.reservation_num
						and customer.customer_name = schedule.passenger_name
						and customer.customer_id = reservation.customer_id
					</where>
					group by reservation.reservation_num
							, schedule.passenger_name 
				 ) counter
			<where>
					full_table.reservation_num = counter.reservation_num
				and counter.count &lt; 2
			</where>
			
			union all
			
			select 
					full_table_start.reservation_num
					, full_table_start.passenger_name
					, full_table_start.customer_id
					, full_table_start.reservation_date
					, full_table_start.departure_date
					, full_table_start.payment
					, CASE
						WHEN full_table_start.type = '출발' THEN full_table_start.departure_name
					  END AS departure_name
					, CASE
						WHEN full_table_end.type = '도착' THEN full_table_end.arrival_name
					  END AS arrival_name
			from (
					select reservation.reservation_num
							, schedule.passenger_name
							, schedule.type
							, customer.customer_id
							, route.departure_name
							, route.arrival_name
							, route.departure_date
							, reservation.reservation_date
							, reservation.payment
					from reservation_fa reservation
							, schedule_fa schedule
							, route_fa route
							, customer_fa customer
					<where>
							reservation.reservation_num = schedule.reservation_num
						and schedule.route_num	= route.route_num
						and reservation.customer_id = customer.customer_id
						and schedule.passenger_name = customer.customer_name
						and schedule.type IN ('출발')
					</where>
				 ) full_table_start,
				 (
					select reservation.reservation_num
							, schedule.passenger_name
							, schedule.type
							, customer.customer_id
							, route.departure_name
							, route.arrival_name
							, route.departure_date
							, reservation.reservation_date
							, reservation.payment
					from reservation_fa reservation
							, schedule_fa schedule
							, route_fa route
							, customer_fa customer
					<where>
							reservation.reservation_num = schedule.reservation_num
						and schedule.route_num	= route.route_num
						and reservation.customer_id = customer.customer_id
						and schedule.passenger_name = customer.customer_name
						and schedule.type IN ('도착')
					</where>
				 ) full_table_end,
				 (
					select reservation.reservation_num
							, count(reservation.reservation_num) as count
					from schedule_fa schedule
							, reservation_fa reservation
							, customer_fa customer
					<where>
							schedule.reservation_num = reservation.reservation_num
						and customer.customer_name = schedule.passenger_name
					</where>
					group by reservation.reservation_num, schedule.passenger_name 
				 ) counter
			<where>
				full_table_start.reservation_num = counter.reservation_num
				and full_table_end.reservation_num = counter.reservation_num
				and counter.count &gt; 1
			</where>
			)
		<where>
			1=1
			<if test="!customer_id.equals('')">
				and customer_id = #{customer_id}
			</if>
			<if test="!reservation_start.equals('')">
				and reservation_date <![CDATA[>=]]> to_date(#{reservation_start}, 'YYYY-MM-DD')
			</if>
			<if test="!reservation_end.equals('')">
				and reservation_date <![CDATA[<=]]> to_date(#{reservation_end}, 'YYYY-MM-DD') + 1			
			</if>
		</where>
		order by reservation_date, departure_date
	</select>
	

	
		<!-- 팝업창 : 예약 세부내역 불러오기(가격) -->
	<select id="getPayment" parameterType="string" resultType="string">
		select payment
		from reservation_fa
		<where>
			reservation_num = #{reservation_num}
		</where>
	</select>
	
	<select id="getSchedule" parameterType="string" resultType="schedule">
		select route_num, passenger_name, passport_num, seat_class
		from schedule_fa
		<where>
			reservation_num = #{reservation_num}
		</where>
	</select>
	
		<select id="getRoute" parameterType="list" resultType="route">
		select route_num
				, airplane_id
				, to_char(departure_date, 'YYYY-MM-DD HH24:MI') as departure_date
				, to_char(arrival_date, 'YYYY-MM-DD HH24:MI') as arrival_date
				, departure_name
				, arrival_name
				, eta
		from route_fa
		where route_num in
		<foreach collection="list" item="item" open="(" close=")" separator=",">
			#{item.route_num}
		</foreach>	
	</select>

	<select id="getAirplane" parameterType="list" resultType="airplane">
		select *
		from airplane_fa
		where airplane_id in
		<foreach collection="list" item="item" open="(" close=")" separator=",">
			#{item.airplane_id}
		</foreach>
	</select>
	
	<select id="getName" parameterType="string" resultType="string">
		select customer_name
		from customer_fa
		<where>
		 	customer_id = #{customer_id}
		</where>
	</select>
	
	
	<!-- 팝업창에 필요한 회원 이름과 등급 가져오기 -->
	<select id="getCustomerNG" parameterType="string" resultType="customer">
		select customer_name, customer_grade
		from customer_fa
		<where>
			customer_id = #{customer_id}
		</where>
	</select>
	
	
=======
	<!-- 팝업창 : 회원정보 수정하기에서 회원정보 가져오기(customerUpdate.jsp) -->
	<select id="userInfoFind" parameterType="string" resultType="customer">
		select *
		from customer_fa
		<where>
			customer_id = #{customer_id}
		</where>
	</select>
	<!-- 팝업창 : 회원정보 수정하기에서 회원정보 수정하기(customerUpdate.jsp) -->
	<update id="userInfoChange" parameterType="customer">
		update customer_fa
		set
			customer_gender = #{customer_gender}
			, customer_country = #{customer_country}
			, customer_email = #{customer_email}
			, customer_birth = #{customer_birth}
			, customer_address = #{customer_address}
			, customer_phone = #{customer_phone}
			, customer_grade = #{customer_grade}
		<where>
			customer_id = #{customer_id}
		</where>
	</update>
	
	<select id="customerGradeSet" parameterType="string" resultType="grade">
		select *
		from customer_grade_fa
		<where>
			grade = #{grade}
		</where>
	</select>
	<update id="customerGradeChange" parameterType="grade">
		update customer_grade_fa
		set
			grade = #{grade}
			, mileage_scope = #{mileage_scope}
			, mileage_ratio = #{mileage_ratio}
			, mileage_exp = #{mileage_exp}
			, pay_scope = #{pay_scope}
			, pay_ratio = #{pay_ratio}
			, promo_terms = #{promo_terms}
		<where>
			grade = #{grade}
		</where>
	</update>
	
	
	<select id="countGrade" resultType="int">
		select count(*) from customer_grade_fa
	</select>
	<update id="gradeDown" parameterType="list">
		update customer_fa
		set customer_grade = NVL((select grade
                       			 from	(select grade 
                        				from customer_grade_fa
                        				where promo_terms &lt; (select min(promo_terms)
                                            					from customer_grade_fa
                                            					where grade IN 
                                            					<foreach collection="list" item="item" open="(" close=")" separator=",">
																		#{item}
																</foreach>
                                            					)
                        				order by promo_terms desc
                        				)
                        		where rownum = 1
                        		), (select grade
									from customer_grade_fa
									where promo_terms = (select min(promo_terms) from customer_grade_fa)
									)
								)
		where
			customer_grade IN
			<foreach collection="list" item="type" open="(" close=")" separator=",">
					#{type}
			</foreach> 
	</update>
	<delete id="gradeDelete" parameterType="list">
		delete from customer_grade_fa
		<where>
			grade IN
			<foreach collection="list" item="type" open="(" close=")" separator=",">
				#{type}
			</foreach>
		</where>
	</delete>
</mapper>